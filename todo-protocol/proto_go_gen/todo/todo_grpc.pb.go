// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: todo/todo.proto

package todo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoRpcClient is the client API for TodoRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoRpcClient interface {
	List(ctx context.Context, in *ListInput, opts ...grpc.CallOption) (*ListOutput, error)
	Get(ctx context.Context, in *GetInput, opts ...grpc.CallOption) (*GetOutput, error)
	Create(ctx context.Context, in *CreateInput, opts ...grpc.CallOption) (*CreateOutput, error)
}

type todoRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoRpcClient(cc grpc.ClientConnInterface) TodoRpcClient {
	return &todoRpcClient{cc}
}

func (c *todoRpcClient) List(ctx context.Context, in *ListInput, opts ...grpc.CallOption) (*ListOutput, error) {
	out := new(ListOutput)
	err := c.cc.Invoke(ctx, "/todo.TodoRpc/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoRpcClient) Get(ctx context.Context, in *GetInput, opts ...grpc.CallOption) (*GetOutput, error) {
	out := new(GetOutput)
	err := c.cc.Invoke(ctx, "/todo.TodoRpc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoRpcClient) Create(ctx context.Context, in *CreateInput, opts ...grpc.CallOption) (*CreateOutput, error) {
	out := new(CreateOutput)
	err := c.cc.Invoke(ctx, "/todo.TodoRpc/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoRpcServer is the server API for TodoRpc service.
// All implementations must embed UnimplementedTodoRpcServer
// for forward compatibility
type TodoRpcServer interface {
	List(context.Context, *ListInput) (*ListOutput, error)
	Get(context.Context, *GetInput) (*GetOutput, error)
	Create(context.Context, *CreateInput) (*CreateOutput, error)
	mustEmbedUnimplementedTodoRpcServer()
}

// UnimplementedTodoRpcServer must be embedded to have forward compatible implementations.
type UnimplementedTodoRpcServer struct {
}

func (UnimplementedTodoRpcServer) List(context.Context, *ListInput) (*ListOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTodoRpcServer) Get(context.Context, *GetInput) (*GetOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTodoRpcServer) Create(context.Context, *CreateInput) (*CreateOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTodoRpcServer) mustEmbedUnimplementedTodoRpcServer() {}

// UnsafeTodoRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoRpcServer will
// result in compilation errors.
type UnsafeTodoRpcServer interface {
	mustEmbedUnimplementedTodoRpcServer()
}

func RegisterTodoRpcServer(s grpc.ServiceRegistrar, srv TodoRpcServer) {
	s.RegisterService(&TodoRpc_ServiceDesc, srv)
}

func _TodoRpc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoRpcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoRpc/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoRpcServer).List(ctx, req.(*ListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoRpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoRpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoRpc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoRpcServer).Get(ctx, req.(*GetInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoRpc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoRpcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoRpc/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoRpcServer).Create(ctx, req.(*CreateInput))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoRpc_ServiceDesc is the grpc.ServiceDesc for TodoRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.TodoRpc",
	HandlerType: (*TodoRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TodoRpc_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TodoRpc_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TodoRpc_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo/todo.proto",
}
